title: "PostgreSQL Basics"
icon: "🗄️"
flashcards:
  - question: "How do you create a new table in PostgreSQL?"
    answer: "Use CREATE TABLE statement with column names and their data types"
    code_example: |
      CREATE TABLE users (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        email VARCHAR(255) UNIQUE,
        age INTEGER,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );

  - question: "How do you insert data into a table?"
    answer: "Use INSERT INTO statement with VALUES clause to add new rows"
    code_example: |
      -- Insert single row
      INSERT INTO users (name, email, age) 
      VALUES ('John Doe', 'john@example.com', 25);

      -- Insert multiple rows
      INSERT INTO users (name, email, age) VALUES 
        ('Alice Smith', 'alice@example.com', 30),
        ('Bob Johnson', 'bob@example.com', 22);

  - question: "How do you select data from a table?"
    answer: "Use SELECT statement to retrieve data from one or more tables"
    code_example: |
      -- Select all columns
      SELECT * FROM users;

      -- Select specific columns
      SELECT name, email FROM users;

      -- Select with condition
      SELECT name, age FROM users WHERE age > 25;

      -- Select with sorting
      SELECT * FROM users ORDER BY name ASC;

  - question: "How do you update existing data in a table?"
    answer: "Use UPDATE statement with SET clause to modify existing rows"
    code_example: |
      -- Update single column
      UPDATE users SET age = 26 WHERE name = 'John Doe';

      -- Update multiple columns
      UPDATE users 
      SET age = 31, email = 'alice.smith@example.com' 
      WHERE name = 'Alice Smith';

      -- Update all rows (be careful!)
      UPDATE users SET created_at = CURRENT_TIMESTAMP;

  - question: "How do you delete data from a table?"
    answer: "Use DELETE statement with WHERE clause to remove specific rows"
    code_example: |
      -- Delete specific rows
      DELETE FROM users WHERE age < 18;

      -- Delete single row
      DELETE FROM users WHERE email = 'john@example.com';

      -- Delete all rows (be very careful!)
      DELETE FROM users;

  - question: "What are the basic comparison operators in PostgreSQL WHERE clauses?"
    answer: "Basic comparison operators are = (equal), != or <> (not equal), < (less than), > (greater than), <= (less or equal), >= (greater or equal)"
    code_example: |
      -- Equality operators
      SELECT * FROM users WHERE age = 25;
      SELECT * FROM users WHERE name = 'John';
      SELECT * FROM users WHERE status != 'inactive';
      SELECT * FROM users WHERE status <> 'inactive';  -- Same as !=

      -- Comparison operators
      SELECT * FROM users WHERE age > 21;
      SELECT * FROM users WHERE age < 65;
      SELECT * FROM users WHERE salary >= 50000;
      SELECT * FROM users WHERE score <= 100;

      -- Date comparisons
      SELECT * FROM orders WHERE order_date > '2023-01-01';
      SELECT * FROM employees WHERE hire_date <= '2022-12-31';

      -- Numeric comparisons with BETWEEN
      SELECT * FROM products WHERE price BETWEEN 10.00 AND 50.00;
      -- Equivalent to: price >= 10.00 AND price <= 50.00

  - question: "What are pattern matching and logical operators in PostgreSQL WHERE clauses?"
    answer: "LIKE for pattern matching with wildcards, IN for multiple values, and AND/OR for combining conditions"
    code_example: |
      -- Pattern matching with LIKE
      SELECT * FROM users WHERE name LIKE 'John%';     -- Starts with 'John'
      SELECT * FROM users WHERE email LIKE '%@gmail.com';  -- Ends with '@gmail.com'
      SELECT * FROM users WHERE phone LIKE '555-____';     -- 555- followed by 4 characters
      SELECT * FROM users WHERE name LIKE '%smith%';       -- Contains 'smith'

      -- Case-insensitive pattern matching
      SELECT * FROM users WHERE name ILIKE 'JOHN%';    -- Case insensitive

      -- IN operator for multiple values
      SELECT * FROM users WHERE city IN ('New York', 'Los Angeles', 'Chicago');
      SELECT * FROM products WHERE category_id IN (1, 3, 5, 7);
      SELECT * FROM users WHERE age IN (25, 30, 35);

      -- NOT IN
      SELECT * FROM users WHERE status NOT IN ('deleted', 'suspended');

      -- Logical operators AND/OR
      SELECT * FROM users WHERE age > 18 AND age < 65;
      SELECT * FROM users WHERE name = 'John' OR name = 'Jane';
      SELECT * FROM products WHERE (price < 20 OR category = 'sale') AND in_stock = true;

  - question: "How do you check for NULL values in PostgreSQL WHERE clauses?"
    answer: "Use IS NULL to check for null values and IS NOT NULL to check for non-null values. Never use = or != with NULL"
    code_example: |
      -- Check for NULL values
      SELECT * FROM users WHERE email IS NULL;
      SELECT * FROM users WHERE phone IS NULL;
      SELECT * FROM orders WHERE shipped_date IS NULL;  -- Unshipped orders

      -- Check for NOT NULL values
      SELECT * FROM users WHERE email IS NOT NULL;
      SELECT * FROM products WHERE description IS NOT NULL;

      -- WRONG way (doesn't work with NULL)
      -- SELECT * FROM users WHERE email = NULL;     -- This won't work!
      -- SELECT * FROM users WHERE email != NULL;    -- This won't work!

      -- Combine NULL checks with other conditions
      SELECT * FROM users WHERE email IS NOT NULL AND age > 18;
      SELECT * FROM users WHERE (phone IS NULL OR email IS NULL);

      -- COALESCE to handle NULLs in results
      SELECT name, COALESCE(email, 'No email') as email_display 
      FROM users WHERE age > 25;

      -- NULLIF function
      SELECT name, NULLIF(status, '') as clean_status 
      FROM users;  -- Convert empty strings to NULL

  - question: "How do you use LIMIT and OFFSET for pagination?"
    answer: "LIMIT restricts the number of rows returned, OFFSET skips a specified number of rows"
    code_example: |
      -- Get first 10 users
      SELECT * FROM users LIMIT 10;

      -- Get users 11-20 (pagination)
      SELECT * FROM users LIMIT 10 OFFSET 10;

      -- Get top 5 oldest users
      SELECT * FROM users ORDER BY age DESC LIMIT 5;

      -- Skip first 3 users, get next 5
      SELECT * FROM users ORDER BY name LIMIT 5 OFFSET 3;

  - question: "How do you group data and use aggregate functions?"
    answer: "Use GROUP BY to group rows and aggregate functions like COUNT, SUM, AVG, MIN, MAX"
    code_example: |
      -- Count users by age
      SELECT age, COUNT(*) as user_count 
      FROM users 
      GROUP BY age;

      -- Average age of users
      SELECT AVG(age) as average_age FROM users;

      -- Count total users
      SELECT COUNT(*) as total_users FROM users;

      -- Group with condition
      SELECT age, COUNT(*) as count 
      FROM users 
      WHERE age > 18 
      GROUP BY age 
      HAVING COUNT(*) > 1;

  - question: "How do you join two tables together?"
    answer: "Use JOIN clauses (INNER JOIN, LEFT JOIN, RIGHT JOIN) to combine data from multiple tables"
    code_example: |
      -- Assume we have an orders table
      CREATE TABLE orders (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id),
        product VARCHAR(100),
        amount DECIMAL(10,2)
      );

      -- Inner join (only matching records)
      SELECT users.name, orders.product, orders.amount
      FROM users
      INNER JOIN orders ON users.id = orders.user_id;

      -- Left join (all users, even without orders)
      SELECT users.name, orders.product
      FROM users
      LEFT JOIN orders ON users.id = orders.user_id;

  - question: "What are the numeric data types in PostgreSQL?"
    answer: "Numeric types include INTEGER, BIGINT, SMALLINT, DECIMAL/NUMERIC, REAL, and SERIAL for auto-incrementing values"
    code_example: |
      CREATE TABLE financial_data (
        id SERIAL PRIMARY KEY,              -- Auto-incrementing integer (1, 2, 3...)
        user_id INTEGER NOT NULL,           -- Standard 4-byte integer (-2B to +2B)
        account_id BIGINT,                  -- 8-byte integer for very large numbers
        score SMALLINT,                     -- 2-byte integer (-32K to +32K)
        balance DECIMAL(15,2),              -- Exact decimal: 15 digits, 2 after decimal
        interest_rate NUMERIC(5,4),         -- Exact: 5 digits total, 4 after decimal
        avg_score REAL,                     -- 4-byte floating point (approximate)
        computed_value DOUBLE PRECISION     -- 8-byte floating point (approximate)
      );

      -- Examples of numeric operations
      INSERT INTO financial_data (user_id, balance, interest_rate) 
      VALUES (1, 1234.56, 0.0425);

      -- SERIAL automatically increments
      INSERT INTO financial_data (user_id, balance) 
      VALUES (2, 5000.00);  -- id will be auto-assigned

  - question: "What are the text data types in PostgreSQL?"
    answer: "Text types include VARCHAR(n) for limited length, TEXT for unlimited length, and CHAR(n) for fixed-length strings"
    code_example: |
      CREATE TABLE user_profiles (
        id SERIAL PRIMARY KEY,
        username VARCHAR(50) NOT NULL,      -- Variable length, max 50 chars
        email VARCHAR(255) UNIQUE,          -- Variable length, max 255 chars
        bio TEXT,                           -- Unlimited length text
        country_code CHAR(2),               -- Fixed 2 characters (US, CA, etc.)
        status_code CHAR(1) DEFAULT 'A'     -- Fixed 1 character (A, I, D)
      );

      -- TEXT vs VARCHAR examples
      INSERT INTO user_profiles (username, email, bio, country_code) 
      VALUES 
        ('alice', 'alice@example.com', 'I love programming and coffee!', 'US'),
        ('bob', 'bob@test.com', 'Software engineer with 10+ years experience building web applications...', 'CA');

      -- CHAR pads with spaces if needed
      INSERT INTO user_profiles (username, email, country_code) 
      VALUES ('charlie', 'charlie@example.com', 'UK');  -- country_code stored as 'UK'

  - question: "What are the date and time data types in PostgreSQL?"
    answer: "Date/time types include DATE for dates only, TIME for time only, TIMESTAMP for date+time, and TIMESTAMPTZ for timezone-aware timestamps"
    code_example: |
      CREATE TABLE events (
        id SERIAL PRIMARY KEY,
        event_name VARCHAR(100),
        event_date DATE,                    -- Date only: 2023-12-25
        start_time TIME,                    -- Time only: 14:30:00
        created_at TIMESTAMP,               -- Date and time: 2023-12-25 14:30:00
        updated_at TIMESTAMPTZ,             -- Date, time + timezone
        duration INTERVAL                   -- Time span: 2 hours 30 minutes
      );

      -- Inserting date/time data
      INSERT INTO events (event_name, event_date, start_time, created_at, updated_at, duration)
      VALUES 
        ('Conference', '2023-12-25', '09:00:00', '2023-12-01 10:30:00', 
         '2023-12-01 10:30:00-05', '8 hours'),
        ('Meeting', CURRENT_DATE, CURRENT_TIME, NOW(), NOW(), '1 hour 30 minutes');

      -- Date/time functions
      SELECT 
        event_name,
        event_date,
        EXTRACT(YEAR FROM event_date) as event_year,
        AGE(event_date, CURRENT_DATE) as days_until,
        created_at + INTERVAL '1 day' as tomorrow
      FROM events;

  - question: "What are boolean, serial, and other special data types in PostgreSQL?"
    answer: "Boolean stores TRUE/FALSE, SERIAL creates auto-incrementing integers, and PostgreSQL also supports JSON, UUID, and array types"
    code_example: |
      CREATE TABLE products (
        id SERIAL PRIMARY KEY,              -- Auto-incrementing primary key
        uuid UUID DEFAULT gen_random_uuid(), -- Unique identifier
        name VARCHAR(100) NOT NULL,
        is_active BOOLEAN DEFAULT TRUE,     -- TRUE, FALSE, or NULL
        is_featured BOOLEAN,
        tags TEXT[],                        -- Array of text values
        metadata JSON,                      -- JSON data
        config JSONB                        -- Binary JSON (faster queries)
      );

      -- Boolean examples
      INSERT INTO products (name, is_active, is_featured, tags, metadata, config)
      VALUES 
        ('Laptop', TRUE, FALSE, 
         ARRAY['electronics', 'computers', 'portable'],
         '{"brand": "Dell", "model": "XPS13"}',
         '{"warranty": "2 years", "color": "silver"}'),
        ('Phone', 't', 'f',  -- 't' and 'f' are valid boolean inputs
         '{"smartphone", "mobile"}',  -- Alternative array syntax
         '{"brand": "iPhone", "storage": "256GB"}',
         '{"carrier": "unlocked"}');

      -- Querying special types
      SELECT name, is_active, 
             'electronics' = ANY(tags) as is_electronic,
             metadata->>'brand' as brand,
             config->'warranty' as warranty_info
      FROM products 
      WHERE is_active = TRUE;

  - question: "How do you add constraints to table columns?"
    answer: "Use constraints like PRIMARY KEY, FOREIGN KEY, UNIQUE, NOT NULL, CHECK, DEFAULT"
    code_example: |
      CREATE TABLE employees (
        id SERIAL PRIMARY KEY,
        employee_id VARCHAR(10) UNIQUE NOT NULL,
        name VARCHAR(100) NOT NULL,
        email VARCHAR(255) UNIQUE,
        age INTEGER CHECK (age >= 18 AND age <= 100),
        salary DECIMAL(10,2) DEFAULT 0.00,
        department_id INTEGER REFERENCES departments(id)
      );

      -- Add constraint to existing table
      ALTER TABLE employees 
      ADD CONSTRAINT check_positive_salary 
      CHECK (salary >= 0);

  - question: "How do you create and drop a database?"
    answer: "Use CREATE DATABASE to create and DROP DATABASE to delete a database"
    code_example: |
      -- Create a new database
      CREATE DATABASE my_company;

      -- Connect to database (in psql)
      \c my_company;

      -- Drop a database (be very careful!)
      DROP DATABASE my_company;

      -- Create database with specific settings
      CREATE DATABASE my_app 
      WITH ENCODING 'UTF8' 
      OWNER my_user;

  - question: "How do you use aliases in SQL queries?"
    answer: "Use AS keyword (optional) to create aliases for tables and columns for cleaner output"
    code_example: |
      -- Column aliases
      SELECT 
        name AS full_name,
        email AS email_address,
        age AS years_old
      FROM users;

      -- Table aliases (useful for joins)
      SELECT 
        u.name,
        o.product,
        o.amount
      FROM users AS u
      INNER JOIN orders AS o ON u.id = o.user_id;

      -- Alias without AS keyword
      SELECT name full_name, COUNT(*) total_orders
      FROM users u
      LEFT JOIN orders o ON u.id = o.user_id
      GROUP BY u.name;

  - question: "How do you sort query results?"
    answer: "Use ORDER BY clause with ASC (ascending) or DESC (descending) to sort results"
    code_example: |
      -- Sort by single column
      SELECT * FROM users ORDER BY name ASC;
      SELECT * FROM users ORDER BY age DESC;

      -- Sort by multiple columns
      SELECT * FROM users 
      ORDER BY age DESC, name ASC;

      -- Sort with NULL values
      SELECT * FROM users 
      ORDER BY email NULLS LAST;

      -- Sort by calculated value
      SELECT name, age, (2024 - age) as birth_year
      FROM users 
      ORDER BY birth_year;

  - question: "How do you use DISTINCT to remove duplicates?"
    answer: "Use DISTINCT keyword to return only unique values in query results"
    code_example: |
      -- Get unique ages
      SELECT DISTINCT age FROM users;

      -- Get unique combinations
      SELECT DISTINCT age, city FROM users;

      -- Count unique values
      SELECT COUNT(DISTINCT age) as unique_ages FROM users;

      -- Distinct with ORDER BY
      SELECT DISTINCT city 
      FROM users 
      WHERE city IS NOT NULL 
      ORDER BY city;

  - question: "How do you use subqueries in SQL?"
    answer: "Subqueries are queries nested inside other queries, used in WHERE, FROM, or SELECT clauses"
    code_example: |
      -- Subquery in WHERE clause
      SELECT name, age 
      FROM users 
      WHERE age > (SELECT AVG(age) FROM users);

      -- Subquery with IN
      SELECT name 
      FROM users 
      WHERE id IN (SELECT user_id FROM orders WHERE amount > 100);

      -- Subquery in FROM clause
      SELECT avg_age_by_city.city, avg_age_by_city.avg_age
      FROM (
        SELECT city, AVG(age) as avg_age 
        FROM users 
        GROUP BY city
      ) AS avg_age_by_city
      WHERE avg_age_by_city.avg_age > 25;

  - question: "How do you connect to a PostgreSQL database using psql?"
    answer: "Use psql command with database connection parameters including host, port, database name, and username"
    code_example: |
      # Connect to local database with username
      psql -U username -d database_name

      # Connect to remote database
      psql -h hostname -p 5432 -U username -d database_name

      # Connect with password prompt
      psql -U username -d database_name -W

      # Connect using connection string
      psql postgresql://username:password@hostname:5432/database_name

      # Connect to default database (same name as username)
      psql -U username

  - question: "How do you list databases and connect to them in psql?"
    answer: "Use \\l to list all databases and \\c to connect to a different database"
    code_example: |
      # List all databases
      \l

      # Connect to a different database
      \c database_name
      \c database_name username

      # Show current connection info
      \conninfo

      # Quit psql
      \q

  - question: "How do you list and describe tables in psql?"
    answer: "Use \\dt to list tables and \\d to describe table structure with columns and constraints"
    code_example: |
      # List all tables in current database
      \dt
      \dt+  # With sizes and descriptions

      # Describe a specific table structure
      \d table_name
      \d+ table_name  # Detailed description with additional info

      # List all schemas
      \dn

  - question: "How do you view other database objects in psql?"
    answer: "Use \\d commands with different letters to list views, indexes, sequences, functions, and users"
    code_example: |
      # List all views
      \dv

      # List all indexes
      \di

      # List all sequences
      \ds

      # List all functions
      \df

      # List all users/roles
      \du

      # Show table permissions
      \dp table_name

  - question: "How do you execute SQL files in psql?"
    answer: "Use \\i to execute SQL files from absolute paths and \\ir for relative paths"
    code_example: |
      # Execute SQL file
      \i /path/to/script.sql
      \i ~/database/setup.sql

      # Execute file relative to current directory
      \ir relative/path/script.sql

      # Include another psql script
      \include setup_users.sql

  - question: "How do you manage output and data import/export in psql?"
    answer: "Use \\o to redirect output to files and \\copy to import/export CSV data"
    code_example: |
      # Redirect query output to file
      \o output.txt
      SELECT * FROM users;
      \o  # Stop redirecting (back to screen)

      # Copy data from CSV file to table
      \copy users(name,email,age) FROM 'users.csv' WITH CSV HEADER

      # Copy query results to CSV file
      \copy (SELECT name, email FROM users) TO 'export.csv' WITH CSV HEADER

  - question: "How do you get help for SQL commands in psql?"
    answer: "Use \\h to get help on SQL commands and syntax"
    code_example: |
      # Get help on SQL commands
      \h                    # List all SQL commands
      \h SELECT            # Help on SELECT statement
      \h CREATE TABLE      # Help on CREATE TABLE
      \h UPDATE            # Help on UPDATE statement

  - question: "How do you get help for psql commands and view history?"
    answer: "Use \\? for psql meta-commands help, \\s for command history, and \\e to edit commands"
    code_example: |
      # Get help on psql meta-commands
      \?                   # List all psql commands

      # View command history
      \s                   # Show session history
      \s filename          # Save history to file

      # Edit previous command in editor
      \e                   # Open last command in editor
      \e filename          # Edit file in editor

  - question: "How do you set variables and customize psql settings?"
    answer: "Use \\set to define variables and customize psql behavior and display"
    code_example: |
      # Set psql variables
      \set user_id 123
      \set table_name 'users'
      SELECT * FROM :table_name WHERE id = :user_id;

      # Show current settings
      \set                 # Show all variables
      \set PROMPT1 '%n@%m:%>%x %# '  # Customize prompt

      # Environment variables
      \set ON_ERROR_STOP on     # Stop on first error
      \set AUTOCOMMIT off       # Manual transaction control
      \set QUIET on             # Suppress notices

  - question: "How do you manage transactions in psql?"
    answer: "Use BEGIN/COMMIT/ROLLBACK for transaction control and test changes before committing"
    code_example: |
      # Transaction control
      BEGIN;
      INSERT INTO users (name, email) VALUES ('Test User', 'test@example.com');
      -- Check the data
      SELECT * FROM users WHERE email = 'test@example.com';
      ROLLBACK;  -- or COMMIT; to save changes

      # Conditional execution with variables
      \set user_exists `SELECT COUNT(*) FROM users WHERE id = 1`
      SELECT CASE WHEN :user_exists > 0 THEN 'User exists' ELSE 'No user' END;

  - question: "How do you run psql with command-line options for single commands?"
    answer: "Use -c to execute single commands and -f to run SQL files from the command line"
    code_example: |
      # Execute single command and exit
      psql -U username -d database -c "SELECT COUNT(*) FROM users;"

      # Execute SQL file
      psql -U username -d database -f script.sql

      # Run file in single transaction (all or nothing)
      psql -U username -d database -1 -f migration.sql

  - question: "How do you control psql output format and behavior?"
    answer: "Use command-line options like --csv, --html, -q for different output formats and quiet mode"
    code_example: |
      # CSV output format
      psql -U username -d database --csv -c "SELECT * FROM users;"

      # HTML output format
      psql -U username -d database --html -c "SELECT * FROM users;"

      # Quiet mode (no extra output)
      psql -U username -d database -q -c "INSERT INTO logs VALUES (NOW(), 'Script executed');"

      # Set variables from command line
      psql -U username -d database -v table_name=users -c "SELECT COUNT(*) FROM :table_name;"

      # No password prompt (use .pgpass or environment)
      PGPASSWORD=mypassword psql -U username -d database -c "SELECT version();"

