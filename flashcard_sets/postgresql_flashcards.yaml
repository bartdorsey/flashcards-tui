flashcards:
  - question: "How do you create a new table in PostgreSQL?"
    answer: "Use CREATE TABLE statement with column names and their data types"
    code_example: |
      CREATE TABLE users (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        email VARCHAR(255) UNIQUE,
        age INTEGER,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );

  - question: "How do you insert data into a table?"
    answer: "Use INSERT INTO statement with VALUES clause to add new rows"
    code_example: |
      -- Insert single row
      INSERT INTO users (name, email, age) 
      VALUES ('John Doe', 'john@example.com', 25);
      
      -- Insert multiple rows
      INSERT INTO users (name, email, age) VALUES 
        ('Alice Smith', 'alice@example.com', 30),
        ('Bob Johnson', 'bob@example.com', 22);

  - question: "How do you select data from a table?"
    answer: "Use SELECT statement to retrieve data from one or more tables"
    code_example: |
      -- Select all columns
      SELECT * FROM users;
      
      -- Select specific columns
      SELECT name, email FROM users;
      
      -- Select with condition
      SELECT name, age FROM users WHERE age > 25;
      
      -- Select with sorting
      SELECT * FROM users ORDER BY name ASC;

  - question: "How do you update existing data in a table?"
    answer: "Use UPDATE statement with SET clause to modify existing rows"
    code_example: |
      -- Update single column
      UPDATE users SET age = 26 WHERE name = 'John Doe';
      
      -- Update multiple columns
      UPDATE users 
      SET age = 31, email = 'alice.smith@example.com' 
      WHERE name = 'Alice Smith';
      
      -- Update all rows (be careful!)
      UPDATE users SET created_at = CURRENT_TIMESTAMP;

  - question: "How do you delete data from a table?"
    answer: "Use DELETE statement with WHERE clause to remove specific rows"
    code_example: |
      -- Delete specific rows
      DELETE FROM users WHERE age < 18;
      
      -- Delete single row
      DELETE FROM users WHERE email = 'john@example.com';
      
      -- Delete all rows (be very careful!)
      DELETE FROM users;

  - question: "What are the basic WHERE clause operators?"
    answer: "Common operators include =, !=, <, >, <=, >=, LIKE, IN, IS NULL, AND, OR"
    code_example: |
      -- Equality and comparison
      SELECT * FROM users WHERE age = 25;
      SELECT * FROM users WHERE age > 21;
      
      -- Pattern matching
      SELECT * FROM users WHERE name LIKE 'John%';
      SELECT * FROM users WHERE email LIKE '%@gmail.com';
      
      -- Multiple conditions
      SELECT * FROM users WHERE age > 18 AND age < 65;
      SELECT * FROM users WHERE name = 'John' OR name = 'Jane';
      
      -- Check for NULL values
      SELECT * FROM users WHERE email IS NULL;
      SELECT * FROM users WHERE email IS NOT NULL;

  - question: "How do you use LIMIT and OFFSET for pagination?"
    answer: "LIMIT restricts the number of rows returned, OFFSET skips a specified number of rows"
    code_example: |
      -- Get first 10 users
      SELECT * FROM users LIMIT 10;
      
      -- Get users 11-20 (pagination)
      SELECT * FROM users LIMIT 10 OFFSET 10;
      
      -- Get top 5 oldest users
      SELECT * FROM users ORDER BY age DESC LIMIT 5;
      
      -- Skip first 3 users, get next 5
      SELECT * FROM users ORDER BY name LIMIT 5 OFFSET 3;

  - question: "How do you group data and use aggregate functions?"
    answer: "Use GROUP BY to group rows and aggregate functions like COUNT, SUM, AVG, MIN, MAX"
    code_example: |
      -- Count users by age
      SELECT age, COUNT(*) as user_count 
      FROM users 
      GROUP BY age;
      
      -- Average age of users
      SELECT AVG(age) as average_age FROM users;
      
      -- Count total users
      SELECT COUNT(*) as total_users FROM users;
      
      -- Group with condition
      SELECT age, COUNT(*) as count 
      FROM users 
      WHERE age > 18 
      GROUP BY age 
      HAVING COUNT(*) > 1;

  - question: "How do you join two tables together?"
    answer: "Use JOIN clauses (INNER JOIN, LEFT JOIN, RIGHT JOIN) to combine data from multiple tables"
    code_example: |
      -- Assume we have an orders table
      CREATE TABLE orders (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id),
        product VARCHAR(100),
        amount DECIMAL(10,2)
      );
      
      -- Inner join (only matching records)
      SELECT users.name, orders.product, orders.amount
      FROM users
      INNER JOIN orders ON users.id = orders.user_id;
      
      -- Left join (all users, even without orders)
      SELECT users.name, orders.product
      FROM users
      LEFT JOIN orders ON users.id = orders.user_id;

  - question: "What are common data types in PostgreSQL?"
    answer: "Common types include INTEGER, VARCHAR, TEXT, BOOLEAN, DATE, TIMESTAMP, DECIMAL, SERIAL"
    code_example: |
      CREATE TABLE products (
        id SERIAL PRIMARY KEY,           -- Auto-incrementing integer
        name VARCHAR(255) NOT NULL,      -- Variable-length string
        description TEXT,                -- Unlimited text
        price DECIMAL(10,2),            -- Decimal with 2 decimal places
        in_stock BOOLEAN DEFAULT true,   -- True/false value
        created_date DATE,              -- Date only
        updated_at TIMESTAMP            -- Date and time
      );

  - question: "How do you add constraints to table columns?"
    answer: "Use constraints like PRIMARY KEY, FOREIGN KEY, UNIQUE, NOT NULL, CHECK, DEFAULT"
    code_example: |
      CREATE TABLE employees (
        id SERIAL PRIMARY KEY,
        employee_id VARCHAR(10) UNIQUE NOT NULL,
        name VARCHAR(100) NOT NULL,
        email VARCHAR(255) UNIQUE,
        age INTEGER CHECK (age >= 18 AND age <= 100),
        salary DECIMAL(10,2) DEFAULT 0.00,
        department_id INTEGER REFERENCES departments(id)
      );
      
      -- Add constraint to existing table
      ALTER TABLE employees 
      ADD CONSTRAINT check_positive_salary 
      CHECK (salary >= 0);

  - question: "How do you create and drop a database?"
    answer: "Use CREATE DATABASE to create and DROP DATABASE to delete a database"
    code_example: |
      -- Create a new database
      CREATE DATABASE my_company;
      
      -- Connect to database (in psql)
      \c my_company;
      
      -- Drop a database (be very careful!)
      DROP DATABASE my_company;
      
      -- Create database with specific settings
      CREATE DATABASE my_app 
      WITH ENCODING 'UTF8' 
      OWNER my_user;

  - question: "How do you use aliases in SQL queries?"
    answer: "Use AS keyword (optional) to create aliases for tables and columns for cleaner output"
    code_example: |
      -- Column aliases
      SELECT 
        name AS full_name,
        email AS email_address,
        age AS years_old
      FROM users;
      
      -- Table aliases (useful for joins)
      SELECT 
        u.name,
        o.product,
        o.amount
      FROM users AS u
      INNER JOIN orders AS o ON u.id = o.user_id;
      
      -- Alias without AS keyword
      SELECT name full_name, COUNT(*) total_orders
      FROM users u
      LEFT JOIN orders o ON u.id = o.user_id
      GROUP BY u.name;

  - question: "How do you sort query results?"
    answer: "Use ORDER BY clause with ASC (ascending) or DESC (descending) to sort results"
    code_example: |
      -- Sort by single column
      SELECT * FROM users ORDER BY name ASC;
      SELECT * FROM users ORDER BY age DESC;
      
      -- Sort by multiple columns
      SELECT * FROM users 
      ORDER BY age DESC, name ASC;
      
      -- Sort with NULL values
      SELECT * FROM users 
      ORDER BY email NULLS LAST;
      
      -- Sort by calculated value
      SELECT name, age, (2024 - age) as birth_year
      FROM users 
      ORDER BY birth_year;

  - question: "How do you use DISTINCT to remove duplicates?"
    answer: "Use DISTINCT keyword to return only unique values in query results"
    code_example: |
      -- Get unique ages
      SELECT DISTINCT age FROM users;
      
      -- Get unique combinations
      SELECT DISTINCT age, city FROM users;
      
      -- Count unique values
      SELECT COUNT(DISTINCT age) as unique_ages FROM users;
      
      -- Distinct with ORDER BY
      SELECT DISTINCT city 
      FROM users 
      WHERE city IS NOT NULL 
      ORDER BY city;

  - question: "How do you use subqueries in SQL?"
    answer: "Subqueries are queries nested inside other queries, used in WHERE, FROM, or SELECT clauses"
    code_example: |
      -- Subquery in WHERE clause
      SELECT name, age 
      FROM users 
      WHERE age > (SELECT AVG(age) FROM users);
      
      -- Subquery with IN
      SELECT name 
      FROM users 
      WHERE id IN (SELECT user_id FROM orders WHERE amount > 100);
      
      -- Subquery in FROM clause
      SELECT avg_age_by_city.city, avg_age_by_city.avg_age
      FROM (
        SELECT city, AVG(age) as avg_age 
        FROM users 
        GROUP BY city
      ) AS avg_age_by_city
      WHERE avg_age_by_city.avg_age > 25;