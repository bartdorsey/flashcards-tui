title: "PostgreSQL Basics"
icon: "🗄️"
flashcards:
  - question: "What is a database?"
    answer: "A database is an organized collection of structured information stored electronically, designed for efficient storage, retrieval, and management of data"
    code_example: |
      -- A database contains multiple tables
      -- Each table stores related data
      -- PostgreSQL can host multiple databases
      
      -- Example: A company database might contain:
      -- - employees table
      -- - departments table  
      -- - projects table
      -- - customers table

  - question: "What is a table in a database?"
    answer: "A table is a collection of related data organized in rows and columns, similar to a spreadsheet"
    code_example: |
      -- Table structure example:
      -- users table
      -- +----+----------+-------------------+-----+
      -- | id | name     | email             | age |
      -- +----+----------+-------------------+-----+
      -- | 1  | John Doe | john@example.com  | 25  |
      -- | 2  | Jane     | jane@example.com  | 30  |
      -- +----+----------+-------------------+-----+
      
      -- Columns define data types and structure
      -- Rows contain actual data records

  - question: "What is a row (record) and a column (field)?"
    answer: "A row (record) is a single entry in a table containing related data. A column (field) is a vertical element defining a specific attribute"
    code_example: |
      -- In a users table:
      -- 
      -- COLUMNS (fields):     id | name     | email            | age
      --                      ----+----------+------------------+----
      -- ROW 1 (record):       1  | John Doe | john@example.com | 25
      -- ROW 2 (record):       2  | Jane     | jane@example.com | 30
      
      -- Each row represents one user
      -- Each column represents one piece of information about users

  - question: "What is SQL and what does it stand for?"
    answer: "SQL stands for Structured Query Language. It's the standard language for communicating with relational databases"
    code_example: |
      -- SQL is used for:
      -- DDL (Data Definition Language): CREATE, ALTER, DROP
      CREATE TABLE users (id SERIAL, name VARCHAR(100));
      
      -- DML (Data Manipulation Language): INSERT, UPDATE, DELETE
      INSERT INTO users (name) VALUES ('John');
      
      -- DQL (Data Query Language): SELECT
      SELECT name FROM users;
      
      -- DCL (Data Control Language): GRANT, REVOKE (permissions)

  - question: "What is PostgreSQL and how does it differ from other databases?"
    answer: "PostgreSQL is an open-source, object-relational database system known for its reliability, features, and standards compliance"
    code_example: |
      -- PostgreSQL features:
      -- - ACID compliance (reliability)
      -- - Advanced data types (JSON, arrays, custom types)
      -- - Extensibility (custom functions, operators)
      -- - Full-text search
      -- - Spatial data support (PostGIS)
      
      -- Example of PostgreSQL-specific features:
      SELECT data->'name' FROM json_table;  -- JSON operations
      SELECT ARRAY[1,2,3];                  -- Array literals

  - question: "How do you create a new table in PostgreSQL?"
    answer: "Use CREATE TABLE statement with column names and their data types"
    code_example: |
      CREATE TABLE users (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        email VARCHAR(255) UNIQUE,
        age INTEGER,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );

  - question: "How do you insert data into a table?"
    answer: "Use INSERT INTO statement with VALUES clause to add new rows"
    code_example: |
      -- Insert single row
      INSERT INTO users (name, email, age) 
      VALUES ('John Doe', 'john@example.com', 25);

      -- Insert multiple rows
      INSERT INTO users (name, email, age) VALUES 
        ('Alice Smith', 'alice@example.com', 30),
        ('Bob Johnson', 'bob@example.com', 22);

  - question: "How do you select data from a table?"
    answer: "Use SELECT statement to retrieve data from one or more tables"
    code_example: |
      -- Select all columns
      SELECT * FROM users;

      -- Select specific columns
      SELECT name, email FROM users;

      -- Select with condition
      SELECT name, age FROM users WHERE age > 25;

      -- Select with sorting
      SELECT * FROM users ORDER BY name ASC;

  - question: "How do you update existing data in a table?"
    answer: "Use UPDATE statement with SET clause to modify existing rows"
    code_example: |
      -- Update single column
      UPDATE users SET age = 26 WHERE name = 'John Doe';

      -- Update multiple columns
      UPDATE users 
      SET age = 31, email = 'alice.smith@example.com' 
      WHERE name = 'Alice Smith';

  - question: "How do you delete data from a table?"
    answer: "Use DELETE statement with WHERE clause to remove specific rows"
    code_example: |
      -- Delete specific rows
      DELETE FROM users WHERE age < 18;

      -- Delete single row
      DELETE FROM users WHERE email = 'john@example.com';

      -- Delete all rows (be very careful!)
      DELETE FROM users;

  - question: "What are the basic comparison operators in PostgreSQL WHERE clauses?"
    answer: "Basic comparison operators are = (equal), != or <> (not equal), < (less than), > (greater than), <= (less or equal), >= (greater or equal)"
    code_example: |
      -- Equality operators
      SELECT * FROM users WHERE age = 25;
      SELECT * FROM users WHERE name = 'John';
      SELECT * FROM users WHERE status != 'inactive';

      -- Comparison operators
      SELECT * FROM users WHERE age > 21;
      SELECT * FROM users WHERE age < 65;
      SELECT * FROM users WHERE salary >= 50000;

  - question: "How do you check for NULL values in PostgreSQL WHERE clauses?"
    answer: "Use IS NULL to check for null values and IS NOT NULL to check for non-null values. Never use = or != with NULL"
    code_example: |
      -- Check for NULL values
      SELECT * FROM users WHERE email IS NULL;
      SELECT * FROM users WHERE phone IS NULL;

      -- Check for NOT NULL values
      SELECT * FROM users WHERE email IS NOT NULL;

      -- WRONG way (doesn't work with NULL)
      -- SELECT * FROM users WHERE email = NULL;     -- This won't work!

  - question: "What are the basic text data types in PostgreSQL?"
    answer: "Text types include VARCHAR(n) for limited length, TEXT for unlimited length, and CHAR(n) for fixed-length strings"
    code_example: |
      CREATE TABLE user_profiles (
        id SERIAL PRIMARY KEY,
        username VARCHAR(50) NOT NULL,      -- Variable length, max 50 chars
        email VARCHAR(255) UNIQUE,          -- Variable length, max 255 chars
        bio TEXT,                           -- Unlimited length text
        country_code CHAR(2)                -- Fixed 2 characters (US, CA, etc.)
      );

  - question: "What are the basic numeric data types in PostgreSQL?"
    answer: "Numeric types include INTEGER, DECIMAL/NUMERIC for exact numbers, and SERIAL for auto-incrementing values"
    code_example: |
      CREATE TABLE products (
        id SERIAL PRIMARY KEY,              -- Auto-incrementing integer
        user_id INTEGER NOT NULL,           -- Standard integer
        price DECIMAL(10,2),                -- Exact decimal: 10 digits, 2 after decimal
        quantity INTEGER DEFAULT 0
      );

  - question: "What is a primary key?"
    answer: "A primary key is a column (or combination of columns) that uniquely identifies each row in a table"
    code_example: |
      CREATE TABLE users (
        id SERIAL PRIMARY KEY,     -- Primary key: unique identifier
        email VARCHAR(255) UNIQUE, -- Also unique, but not primary key
        name VARCHAR(100)
      );
      
      -- Primary key properties:
      -- 1. Must be unique for each row
      -- 2. Cannot be NULL
      -- 3. Only one primary key per table

  - question: "How do you use LIMIT to control query results?"
    answer: "LIMIT restricts the number of rows returned by a query"
    code_example: |
      -- Get first 10 users
      SELECT * FROM users LIMIT 10;

      -- Get top 5 oldest users
      SELECT * FROM users ORDER BY age DESC LIMIT 5;

  - question: "How do you sort query results?"
    answer: "Use ORDER BY clause with ASC (ascending) or DESC (descending) to sort results"
    code_example: |
      -- Sort by single column
      SELECT * FROM users ORDER BY name ASC;
      SELECT * FROM users ORDER BY age DESC;

      -- Sort by multiple columns
      SELECT * FROM users 
      ORDER BY age DESC, name ASC;

  - question: "How do you use DISTINCT to remove duplicates?"
    answer: "Use DISTINCT keyword to return only unique values in query results"
    code_example: |
      -- Get unique ages
      SELECT DISTINCT age FROM users;

      -- Get unique combinations
      SELECT DISTINCT age, city FROM users;

      -- Count unique values
      SELECT COUNT(DISTINCT age) as unique_ages FROM users;

  - question: "How do you connect to a PostgreSQL database using psql?"
    answer: "Use psql command with database connection parameters including host, port, database name, and username"
    code_example: |
      # Connect to local database with username
      psql -U username -d database_name

      # Connect to remote database
      psql -h hostname -p 5432 -U username -d database_name

      # Connect with password prompt
      psql -U username -d database_name -W

  - question: "How do you list databases and connect to them in psql?"
    answer: "Use \\l to list all databases and \\c to connect to a different database"
    code_example: |
      # List all databases
      \l

      # Connect to a different database
      \c database_name

      # Show current connection info
      \conninfo

      # Quit psql
      \q

  - question: "How do you list and describe tables in psql?"
    answer: "Use \\dt to list tables and \\d to describe table structure with columns and constraints"
    code_example: |
      # List all tables in current database
      \dt

      # Describe a specific table structure
      \d table_name

      # Detailed description with additional info
      \d+ table_name