title: "JavaScript Basics"
icon: "⭐"
flashcards:
  - question: "What is the difference between let, const, and var in JavaScript?"
    answer: "var is function-scoped and can be redeclared; let is block-scoped and can be reassigned; const is block-scoped and cannot be reassigned"
    code_example: |
      var x = 1;    // Function-scoped, can be redeclared
      let y = 2;    // Block-scoped, can be reassigned
      const z = 3;  // Block-scoped, cannot be reassigned
      
      if (true) {
        var x = 10;   // Same variable
        let y = 20;   // Different variable
        const z = 30; // Different variable
      }
      
      console.log(x); // 10
      console.log(y); // 2
      console.log(z); // 3
      
      // Reassignment examples
      let a = 1;
      a = 2;        // OK
      
      const b = 1;
      // b = 2;     // Error: Assignment to constant variable

  - question: "What is the difference between == and === in JavaScript?"
    answer: "== performs type coercion (converts types), while === checks for strict equality (same type and value)"
    code_example: |
      // Double equals (==) with type coercion
      console.log(5 == '5');    // true (string '5' converted to number)
      console.log(true == 1);   // true (boolean converted to number)
      console.log(null == undefined); // true
      
      // Triple equals (===) strict equality
      console.log(5 === '5');   // false (different types)
      console.log(true === 1);  // false (different types)
      console.log(null === undefined); // false
      
      // Best practice: always use ===
      const age = 25;
      if (age === 25) {
        console.log("Exactly 25 years old");
      }

  - question: "What is the difference between function declarations and function expressions?"
    answer: "Function declarations are hoisted (can be called before declaration), while function expressions are not hoisted"
    code_example: |
      // Function Declaration - hoisted
      console.log(declared()); // "I'm declared!" (works)
      
      function declared() {
        return "I'm declared!";
      }
      
      // Function Expression - not hoisted
      // console.log(expressed()); // TypeError: expressed is not a function
      
      const expressed = function() {
        return "I'm expressed!";
      };
      
      // Arrow Function Expression - also not hoisted
      const arrow = () => "I'm an arrow function!";
      
      console.log(expressed()); // "I'm expressed!" (works after declaration)
      console.log(arrow());     // "I'm an arrow function!"

  - question: "What are template literals in JavaScript?"
    answer: "Template literals are string literals that allow embedded expressions, multi-line strings, and string interpolation using backticks"
    code_example: |
      const name = 'Alice';
      const age = 30;
      
      // String interpolation
      const greeting = `Hello, my name is ${name} and I am ${age} years old.`;
      console.log(greeting);
      
      // Multi-line strings
      const multiline = `
        This is a multi-line string.
        It preserves line breaks
        and whitespace.
      `;
      
      // Expression evaluation
      const math = `2 + 3 = ${2 + 3}`;
      console.log(math); // "2 + 3 = 5"
      
      // Function calls in template literals
      function getGreeting(name) {
        return `Welcome, ${name}!`;
      }
      
      const welcome = `${getGreeting('Bob')} How are you today?`;
      console.log(welcome); // "Welcome, Bob! How are you today?"

  - question: "What is the map() method in JavaScript and how does it work?"
    answer: "The map() method creates a new array by transforming each element using a provided function. It doesn't modify the original array"
    code_example: |
      const numbers = [1, 2, 3, 4, 5];
      
      // Basic map usage - transform each element
      const doubled = numbers.map(num => num * 2);
      console.log(doubled); // [2, 4, 6, 8, 10]
      console.log(numbers); // [1, 2, 3, 4, 5] (original unchanged)
      
      // Map with different transformations
      const squares = numbers.map(num => num ** 2);
      console.log(squares); // [1, 4, 9, 16, 25]
      
      // Map with strings
      const words = ['hello', 'world', 'javascript'];
      const capitalized = words.map(word => word.toUpperCase());
      console.log(capitalized); // ['HELLO', 'WORLD', 'JAVASCRIPT']
      
      // Map with objects
      const users = [
        { name: 'Alice', age: 25 },
        { name: 'Bob', age: 30 }
      ];
      const names = users.map(user => user.name);
      console.log(names); // ['Alice', 'Bob']
      
      // Map with index parameter
      const withIndex = numbers.map((num, index) => `${index}: ${num}`);
      console.log(withIndex); // ['0: 1', '1: 2', '2: 3', '3: 4', '4: 5']

  - question: "What is the filter() method in JavaScript and how does it work?"
    answer: "The filter() method creates a new array containing only elements that pass a test function. It returns a boolean for each element"
    code_example: |
      const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
      
      // Filter even numbers
      const evens = numbers.filter(num => num % 2 === 0);
      console.log(evens); // [2, 4, 6, 8, 10]
      
      // Filter numbers greater than 5
      const greaterThanFive = numbers.filter(num => num > 5);
      console.log(greaterThanFive); // [6, 7, 8, 9, 10]
      
      // Filter with strings
      const words = ['apple', 'banana', 'cherry', 'date'];
      const longWords = words.filter(word => word.length > 5);
      console.log(longWords); // ['banana', 'cherry']
      
      // Filter with objects
      const products = [
        { name: 'Laptop', price: 999, inStock: true },
        { name: 'Phone', price: 599, inStock: false },
        { name: 'Tablet', price: 399, inStock: true }
      ];
      
      const availableProducts = products.filter(product => product.inStock);
      console.log(availableProducts); // [Laptop, Tablet objects]
      
      const affordableProducts = products.filter(product => product.price < 500);
      console.log(affordableProducts); // [Phone, Tablet objects]
      
      // Filter with index
      const firstHalf = numbers.filter((num, index) => index < numbers.length / 2);
      console.log(firstHalf); // [1, 2, 3, 4, 5]

  - question: "What is the reduce() method in JavaScript and how does it work?"
    answer: "The reduce() method executes a function on each array element to reduce the array to a single value. It takes an accumulator and current value as parameters"
    code_example: |
      const numbers = [1, 2, 3, 4, 5];
      
      // Basic reduce - sum all numbers
      const sum = numbers.reduce((accumulator, current) => {
        console.log(`acc: ${accumulator}, current: ${current}`);
        return accumulator + current;
      }, 0); // 0 is the initial value
      console.log(sum); // 15
      
      // Find maximum value
      const max = numbers.reduce((acc, current) => {
        return current > acc ? current : acc;
      });
      console.log(max); // 5
      
      // Count occurrences
      const letters = ['a', 'b', 'a', 'c', 'b', 'a'];
      const counts = letters.reduce((acc, letter) => {
        acc[letter] = (acc[letter] || 0) + 1;
        return acc;
      }, {});
      console.log(counts); // { a: 3, b: 2, c: 1 }
      
      // Flatten array
      const nested = [[1, 2], [3, 4], [5, 6]];
      const flattened = nested.reduce((acc, current) => {
        return acc.concat(current);
      }, []);
      console.log(flattened); // [1, 2, 3, 4, 5, 6]
      
      // Group objects by property
      const people = [
        { name: 'Alice', age: 25, city: 'NYC' },
        { name: 'Bob', age: 30, city: 'LA' },
        { name: 'Charlie', age: 25, city: 'NYC' }
      ];
      
      const groupedByAge = people.reduce((acc, person) => {
        const age = person.age;
        if (!acc[age]) acc[age] = [];
        acc[age].push(person);
        return acc;
      }, {});
      console.log(groupedByAge); // { 25: [Alice, Charlie], 30: [Bob] }

  - question: "What is destructuring in JavaScript?"
    answer: "Destructuring is a syntax that allows you to extract values from arrays or properties from objects into distinct variables"
    code_example: |
      // Array destructuring
      const [first, second, ...rest] = [1, 2, 3, 4, 5];
      console.log(first); // 1
      console.log(second); // 2
      console.log(rest); // [3, 4, 5]
      
      // Object destructuring
      const person = { name: 'Alice', age: 30, city: 'New York' };
      const { name, age, city = 'Unknown' } = person;
      console.log(name); // 'Alice'
      console.log(age); // 30
      
      // Nested destructuring
      const user = {
        id: 1,
        profile: {
          username: 'alice123',
          email: 'alice@example.com'
        }
      };
      
      const { profile: { username, email } } = user;
      console.log(username); // 'alice123'

  - question: "What is the spread operator (...) in JavaScript?"
    answer: "The spread operator expands iterables (arrays, objects, strings) into individual elements"
    code_example: |
      // Array spreading
      const arr1 = [1, 2, 3];
      const arr2 = [4, 5, 6];
      const combined = [...arr1, ...arr2]; // [1, 2, 3, 4, 5, 6]
      
      // Function arguments
      function sum(a, b, c) {
        return a + b + c;
      }
      const numbers = [1, 2, 3];
      console.log(sum(...numbers)); // 6
      
      // Object spreading
      const obj1 = { a: 1, b: 2 };
      const obj2 = { c: 3, d: 4 };
      const merged = { ...obj1, ...obj2 }; // { a: 1, b: 2, c: 3, d: 4 }
      
      // Copying arrays/objects
      const originalArray = [1, 2, 3];
      const copiedArray = [...originalArray];
      
      const originalObj = { name: 'Alice', age: 30 };
      const copiedObj = { ...originalObj };
      
      // String spreading
      const str = 'hello';
      const chars = [...str]; // ['h', 'e', 'l', 'l', 'o']

  - question: "What are the primitive data types in JavaScript?"
    answer: "JavaScript has 7 primitive types: string, number, boolean, undefined, null, symbol (ES6), and bigint (ES2020)"
    code_example: |
      // String
      const name = "Alice";
      const greeting = 'Hello';
      
      // Number (integers and floats)
      const age = 25;
      const price = 19.99;
      const infinity = Infinity;
      const notANumber = NaN;
      
      // Boolean
      const isActive = true;
      const isCompleted = false;
      
      // Undefined (declared but not assigned)
      let value;
      console.log(value); // undefined
      
      // Null (intentional absence of value)
      const data = null;
      
      // Symbol (unique identifier)
      const sym1 = Symbol('id');
      const sym2 = Symbol('id');
      console.log(sym1 === sym2); // false
      
      // BigInt (large integers)
      const bigNumber = 1234567890123456789012345678901234567890n;
      
      // Check types
      console.log(typeof name);      // "string"
      console.log(typeof age);       // "number"
      console.log(typeof isActive);  // "boolean"
      console.log(typeof value);     // "undefined"
      console.log(typeof data);      // "object" (this is a known quirk!)
      console.log(typeof sym1);      // "symbol"
      console.log(typeof bigNumber); // "bigint"

  - question: "What is hoisting in JavaScript?"
    answer: "Hoisting is JavaScript's behavior of moving variable and function declarations to the top of their scope during compilation"
    code_example: |
      // Variable hoisting with var
      console.log(x); // undefined (not ReferenceError)
      var x = 5;
      
      // This is how JavaScript interprets it:
      // var x;           // Declaration hoisted
      // console.log(x);  // undefined
      // x = 5;           // Assignment stays in place
      
      // let and const are hoisted but not initialized
      // console.log(y); // ReferenceError: Cannot access 'y' before initialization
      let y = 10;
      
      // Function declaration hoisting
      console.log(sayHello()); // "Hello!" (works)
      
      function sayHello() {
        return "Hello!";
      }
      
      // Function expression hoisting
      // console.log(sayGoodbye()); // TypeError: sayGoodbye is not a function
      var sayGoodbye = function() {
        return "Goodbye!";
      };
      
      // Key points:
      // - var: hoisted and initialized with undefined
      // - let/const: hoisted but not initialized (temporal dead zone)
      // - function declarations: fully hoisted
      // - function expressions: only variable declaration hoisted

  - question: "What is the difference between null and undefined in JavaScript?"
    answer: "undefined means a variable has been declared but not assigned a value, while null is an intentional assignment representing 'no value'"
    code_example: |
      // Undefined examples
      let a;
      console.log(a); // undefined
      
      function test(param) {
        console.log(param); // undefined if no argument passed
      }
      test();
      
      const obj = { name: 'Alice' };
      console.log(obj.age); // undefined (property doesn't exist)
      
      // Null examples
      let b = null; // Intentionally set to "no value"
      console.log(b); // null
      
      // Type checking
      console.log(typeof undefined); // "undefined"
      console.log(typeof null);      // "object" (historical bug)
      
      // Equality comparisons
      console.log(null == undefined);  // true (loose equality)
      console.log(null === undefined); // false (strict equality)
      
      // Falsy values
      console.log(Boolean(null));      // false
      console.log(Boolean(undefined)); // false
      
      // JSON behavior
      JSON.stringify({ a: undefined, b: null });
      // Result: '{"b":null}' (undefined properties are omitted)

  - question: "What are truthy and falsy values in JavaScript?"
    answer: "Falsy values are false, 0, -0, 0n, '', null, undefined, NaN. All other values are truthy"
    code_example: |
      // Falsy values (8 total)
      console.log(Boolean(false));     // false
      console.log(Boolean(0));         // false
      console.log(Boolean(-0));        // false
      console.log(Boolean(0n));        // false (BigInt zero)
      console.log(Boolean(''));        // false (empty string)
      console.log(Boolean(null));      // false
      console.log(Boolean(undefined)); // false
      console.log(Boolean(NaN));       // false
      
      // Truthy values (everything else)
      console.log(Boolean('hello'));   // true
      console.log(Boolean(' '));       // true (space is not empty)
      console.log(Boolean(1));         // true
      console.log(Boolean(-1));        // true
      console.log(Boolean([]));        // true (empty array)
      console.log(Boolean({}));        // true (empty object)
      console.log(Boolean('false'));   // true (string)
      console.log(Boolean(Infinity));  // true
      
      // Common usage in conditions
      const user = { name: 'Alice' };
      
      if (user) {
        console.log('User exists'); // Will execute
      }
      
      const items = [];
      if (items.length) {
        console.log('Has items'); // Won't execute (0 is falsy)
      }
      
      // Logical operators with truthy/falsy
      const name = user.name || 'Anonymous'; // 'Alice'
      const count = 0 || 'No items';         // 'No items'

  - question: "What are objects in JavaScript and how do you work with them?"
    answer: "Objects are collections of key-value pairs. Keys are strings (or Symbols) and values can be any data type"
    code_example: |
      // Object creation
      const person = {
        name: 'Alice',
        age: 30,
        city: 'New York',
        isEmployed: true
      };
      
      // Accessing properties
      console.log(person.name);        // 'Alice' (dot notation)
      console.log(person['age']);      // 30 (bracket notation)
      
      // Dynamic property access
      const property = 'city';
      console.log(person[property]);   // 'New York'
      
      // Adding properties
      person.email = 'alice@example.com';
      person['phone'] = '123-456-7890';
      
      // Modifying properties
      person.age = 31;
      
      // Deleting properties
      delete person.isEmployed;
      
      // Methods in objects
      const calculator = {
        x: 10,
        y: 5,
        add: function() {
          return this.x + this.y;
        },
        // ES6 method shorthand
        multiply() {
          return this.x * this.y;
        },
        // Arrow function (doesn't have its own 'this')
        divide: () => {
          // 'this' refers to global object, not calculator
          return 'Arrow functions don\'t bind this';
        }
      };
      
      console.log(calculator.add());      // 15
      console.log(calculator.multiply()); // 50
      
      // Object methods
      console.log(Object.keys(person));   // Array of keys
      console.log(Object.values(person)); // Array of values
      console.log(Object.entries(person)); // Array of [key, value] pairs
      
      // Check if property exists
      console.log('name' in person);           // true
      console.log(person.hasOwnProperty('age')); // true

  - question: "What are arrays in JavaScript and what are the key methods?"
    answer: "Arrays are ordered lists of values. They have many built-in methods for manipulation, iteration, and transformation"
    code_example: |
      // Array creation
      const fruits = ['apple', 'banana', 'orange'];
      const numbers = new Array(1, 2, 3, 4, 5);
      const mixed = [1, 'hello', true, null, { name: 'Alice' }];
      
      // Array properties
      console.log(fruits.length); // 3
      
      // Adding elements
      fruits.push('grape');        // Add to end: ['apple', 'banana', 'orange', 'grape']
      fruits.unshift('mango');     // Add to beginning: ['mango', 'apple', 'banana', 'orange', 'grape']
      
      // Removing elements
      const lastFruit = fruits.pop();     // Remove from end: 'grape'
      const firstFruit = fruits.shift();  // Remove from beginning: 'mango'
      
      // Finding elements
      const index = fruits.indexOf('banana');     // 1
      const found = fruits.find(fruit => fruit.length > 5); // 'banana'
      const foundIndex = fruits.findIndex(fruit => fruit === 'orange'); // 2
      const includes = fruits.includes('apple');  // true
      
      // Transforming arrays
      const lengths = fruits.map(fruit => fruit.length);     // [5, 6, 6]
      const longFruits = fruits.filter(fruit => fruit.length > 5); // ['banana', 'orange']
      const total = numbers.reduce((sum, num) => sum + num, 0); // 15
      
      // Iterating arrays
      fruits.forEach((fruit, index) => {
        console.log(`${index}: ${fruit}`);
      });
      
      // Other useful methods
      const sliced = fruits.slice(1, 3);      // ['banana', 'orange'] (doesn't modify original)
      const spliced = fruits.splice(1, 1);    // Removes 'banana', returns ['banana']
      const joined = fruits.join(', ');       // 'apple, orange'
      const reversed = [...fruits].reverse(); // Reverse copy
      const sorted = [...fruits].sort();      // Sorted copy

  - question: "What are conditional statements in JavaScript?"
    answer: "Conditional statements execute different code blocks based on conditions: if/else, switch, and ternary operator"
    code_example: |
      // if/else statements
      const age = 20;
      
      if (age >= 18) {
        console.log('You are an adult');
      } else if (age >= 13) {
        console.log('You are a teenager');
      } else {
        console.log('You are a child');
      }
      
      // Ternary operator (condition ? valueIfTrue : valueIfFalse)
      const status = age >= 18 ? 'adult' : 'minor';
      const message = age >= 21 ? 'Can drink' : 'Cannot drink';
      
      // Switch statement
      const day = 'Monday';
      
      switch (day) {
        case 'Monday':
          console.log('Start of work week');
          break;
        case 'Tuesday':
        case 'Wednesday':
        case 'Thursday':
          console.log('Mid week');
          break;
        case 'Friday':
          console.log('TGIF!');
          break;
        case 'Saturday':
        case 'Sunday':
          console.log('Weekend!');
          break;
        default:
          console.log('Invalid day');
      }
      
      // Logical operators in conditions
      const user = { name: 'Alice', isAdmin: true, isActive: true };
      
      // AND operator
      if (user.isAdmin && user.isActive) {
        console.log('User has admin access');
      }
      
      // OR operator
      if (user.isAdmin || user.isActive) {
        console.log('User has some access');
      }
      
      // NOT operator
      if (!user.isActive) {
        console.log('User is inactive');
      }
      
      // Short-circuit evaluation
      user.name && console.log(`Hello, ${user.name}`); // Only runs if name exists
      user.email || console.log('No email provided');   // Only runs if email is falsy

  - question: "What are loops in JavaScript?"
    answer: "Loops allow you to execute code repeatedly: for, while, do-while, for...in, for...of, and array methods like forEach"
    code_example: |
      // For loop
      for (let i = 0; i < 5; i++) {
        console.log(`Iteration ${i}`);
      }
      
      // While loop
      let count = 0;
      while (count < 3) {
        console.log(`Count is ${count}`);
        count++;
      }
      
      // Do-while loop (executes at least once)
      let num = 0;
      do {
        console.log(`Number is ${num}`);
        num++;
      } while (num < 2);
      
      // For...in loop (iterates over object properties)
      const person = { name: 'Alice', age: 30, city: 'NYC' };
      for (let key in person) {
        console.log(`${key}: ${person[key]}`);
      }
      
      // For...of loop (iterates over iterable values)
      const fruits = ['apple', 'banana', 'orange'];
      for (let fruit of fruits) {
        console.log(fruit);
      }
      
      // Array forEach method
      fruits.forEach((fruit, index) => {
        console.log(`${index}: ${fruit}`);
      });
      
      // Loop control statements
      for (let i = 0; i < 10; i++) {
        if (i === 3) continue; // Skip iteration when i is 3
        if (i === 7) break;    // Exit loop when i is 7
        console.log(i);        // Prints: 0, 1, 2, 4, 5, 6
      }
      
      // Nested loops
      for (let i = 1; i <= 3; i++) {
        for (let j = 1; j <= 3; j++) {
          console.log(`${i}, ${j}`);
        }
      }

  - question: "What is 'this' keyword in JavaScript?"
    answer: "'this' refers to the object that is executing the current function. Its value depends on how the function is called"
    code_example: |
      // Global context
      console.log(this); // Window object (browser) or global object (Node.js)
      
      // Object method
      const person = {
        name: 'Alice',
        greet: function() {
          console.log(`Hello, I'm ${this.name}`); // 'this' refers to person object
        },
        greetArrow: () => {
          console.log(`Hello, I'm ${this.name}`); // 'this' refers to global object
        }
      };
      
      person.greet();      // "Hello, I'm Alice"
      person.greetArrow(); // "Hello, I'm undefined" (arrow function doesn't bind this)
      
      // Function call
      function showThis() {
        console.log(this); // global object (or undefined in strict mode)
      }
      showThis();
      
      // Constructor function
      function Person(name) {
        this.name = name;
        this.greet = function() {
          console.log(`Hello, I'm ${this.name}`);
        };
      }
      
      const alice = new Person('Alice');
      alice.greet(); // "Hello, I'm Alice" ('this' refers to new instance)
      
      // Explicit binding with call, apply, bind
      const bob = { name: 'Bob' };
      
      person.greet.call(bob);           // "Hello, I'm Bob"
      person.greet.apply(bob);          // "Hello, I'm Bob"
      const boundGreet = person.greet.bind(bob);
      boundGreet();                     // "Hello, I'm Bob"
      
      // Event handler context
      const button = document.createElement('button');
      button.addEventListener('click', function() {
        console.log(this); // Refers to the button element
      });
      
      // Class methods
      class Animal {
        constructor(name) {
          this.name = name;
        }
        
        speak() {
          console.log(`${this.name} makes a sound`);
        }
      }
      
      const dog = new Animal('Dog');
      dog.speak(); // "Dog makes a sound"

  - question: "What are arrow functions and how do they differ from regular functions?"
    answer: "Arrow functions are a concise way to write functions. They don't have their own 'this', 'arguments', or 'super' binding"
    code_example: |
      // Regular function
      function regularFunction(x, y) {
        return x + y;
      }
      
      // Arrow function equivalents
      const arrowFunction = (x, y) => {
        return x + y;
      };
      
      // Concise arrow function (implicit return)
      const conciseArrow = (x, y) => x + y;
      
      // Single parameter (parentheses optional)
      const square = x => x * x;
      const squareWithParens = (x) => x * x;
      
      // No parameters
      const sayHello = () => 'Hello!';
      
      // Returning objects (wrap in parentheses)
      const createPerson = (name, age) => ({ name, age });
      
      // Key differences:
      
      // 1. 'this' binding
      const obj = {
        name: 'Alice',
        regularMethod: function() {
          console.log(this.name); // 'Alice'
          
          const innerRegular = function() {
            console.log(this.name); // undefined (or global)
          };
          
          const innerArrow = () => {
            console.log(this.name); // 'Alice' (inherits from outer scope)
          };
          
          innerRegular();
          innerArrow();
        }
      };
      
      // 2. No 'arguments' object
      function regularWithArgs() {
        console.log(arguments); // Arguments object
      }
      
      const arrowWithArgs = () => {
        // console.log(arguments); // ReferenceError
        // Use rest parameters instead
      };
      
      const arrowWithRest = (...args) => {
        console.log(args); // Array of arguments
      };
      
      // 3. Cannot be used as constructors
      // const Person = (name) => { this.name = name; }; // Error
      // const person = new Person('Alice'); // TypeError
      
      // 4. No hoisting (function expressions aren't hoisted anyway)
      // console.log(notHoisted()); // ReferenceError
      const notHoisted = () => 'This won\'t work';

  - question: "What is the difference between synchronous and asynchronous JavaScript?"
    answer: "Synchronous code executes line by line and blocks execution. Asynchronous code doesn't block and uses callbacks, promises, or async/await"
    code_example: |
      // Synchronous code (blocking)
      console.log('First');
      console.log('Second');
      console.log('Third');
      // Output: First, Second, Third (in order)
      
      // Asynchronous code with setTimeout
      console.log('Start');
      
      setTimeout(() => {
        console.log('Timeout callback');
      }, 1000);
      
      console.log('End');
      // Output: Start, End, Timeout callback (after 1 second)
      
      // Promises (better than callbacks)
      const fetchData = () => {
        return new Promise((resolve, reject) => {
          setTimeout(() => {
            const data = { id: 1, name: 'Alice' };
            resolve(data); // or reject(new Error('Failed'))
          }, 1000);
        });
      };
      
      // Using promises with .then()
      fetchData()
        .then(data => {
          console.log('Data received:', data);
          return data.id;
        })
        .then(id => {
          console.log('User ID:', id);
        })
        .catch(error => {
          console.error('Error:', error);
        });
      
      // Async/await (modern approach)
      async function getData() {
        try {
          console.log('Fetching data...');
          const data = await fetchData();
          console.log('Data received:', data);
          return data;
        } catch (error) {
          console.error('Error:', error);
        }
      }
      
      // Common async operations
      // - setTimeout/setInterval
      // - fetch() for HTTP requests
      // - File operations
      // - Database queries
      // - Event handlers
      
      // Multiple async operations
      async function fetchMultipleData() {
        // Sequential (one after another)
        const user = await fetchData();
        const posts = await fetchData();
        
        // Parallel (simultaneously)
        const [userData, postsData] = await Promise.all([
          fetchData(),
          fetchData()
        ]);
      }