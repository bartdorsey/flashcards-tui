title: "⭐ JavaScript Basics"
flashcards:
  - question: "What is the difference between let, const, and var in JavaScript?"
    answer: "var is function-scoped and can be redeclared; let is block-scoped and can be reassigned; const is block-scoped and cannot be reassigned"
    code_example: |
      var x = 1;    // Function-scoped, can be redeclared
      let y = 2;    // Block-scoped, can be reassigned
      const z = 3;  // Block-scoped, cannot be reassigned
      
      if (true) {
        var x = 10;   // Same variable
        let y = 20;   // Different variable
        const z = 30; // Different variable
      }
      
      console.log(x); // 10
      console.log(y); // 2
      console.log(z); // 3
      
      // Reassignment examples
      let a = 1;
      a = 2;        // OK
      
      const b = 1;
      // b = 2;     // Error: Assignment to constant variable

  - question: "What is the difference between == and === in JavaScript?"
    answer: "== performs type coercion (converts types), while === checks for strict equality (same type and value)"
    code_example: |
      // Double equals (==) with type coercion
      console.log(5 == '5');    // true (string '5' converted to number)
      console.log(true == 1);   // true (boolean converted to number)
      console.log(null == undefined); // true
      
      // Triple equals (===) strict equality
      console.log(5 === '5');   // false (different types)
      console.log(true === 1);  // false (different types)
      console.log(null === undefined); // false
      
      // Best practice: always use ===
      const age = 25;
      if (age === 25) {
        console.log("Exactly 25 years old");
      }

  - question: "What is the difference between function declarations and function expressions?"
    answer: "Function declarations are hoisted (can be called before declaration), while function expressions are not hoisted"
    code_example: |
      // Function Declaration - hoisted
      console.log(declared()); // "I'm declared!" (works)
      
      function declared() {
        return "I'm declared!";
      }
      
      // Function Expression - not hoisted
      // console.log(expressed()); // TypeError: expressed is not a function
      
      const expressed = function() {
        return "I'm expressed!";
      };
      
      // Arrow Function Expression - also not hoisted
      const arrow = () => "I'm an arrow function!";
      
      console.log(expressed()); // "I'm expressed!" (works after declaration)
      console.log(arrow());     // "I'm an arrow function!"

  - question: "What are template literals in JavaScript?"
    answer: "Template literals are string literals that allow embedded expressions, multi-line strings, and string interpolation using backticks"
    code_example: |
      const name = 'Alice';
      const age = 30;
      
      // String interpolation
      const greeting = `Hello, my name is ${name} and I am ${age} years old.`;
      console.log(greeting);
      
      // Multi-line strings
      const multiline = `
        This is a multi-line string.
        It preserves line breaks
        and whitespace.
      `;
      
      // Expression evaluation
      const math = `2 + 3 = ${2 + 3}`;
      console.log(math); // "2 + 3 = 5"
      
      // Function calls in template literals
      function getGreeting(name) {
        return `Welcome, ${name}!`;
      }
      
      const welcome = `${getGreeting('Bob')} How are you today?`;
      console.log(welcome); // "Welcome, Bob! How are you today?"

  - question: "What is the map() method in JavaScript and how does it work?"
    answer: "The map() method creates a new array by transforming each element using a provided function. It doesn't modify the original array"
    code_example: |
      const numbers = [1, 2, 3, 4, 5];
      
      // Basic map usage - transform each element
      const doubled = numbers.map(num => num * 2);
      console.log(doubled); // [2, 4, 6, 8, 10]
      console.log(numbers); // [1, 2, 3, 4, 5] (original unchanged)
      
      // Map with different transformations
      const squares = numbers.map(num => num ** 2);
      console.log(squares); // [1, 4, 9, 16, 25]
      
      // Map with strings
      const words = ['hello', 'world', 'javascript'];
      const capitalized = words.map(word => word.toUpperCase());
      console.log(capitalized); // ['HELLO', 'WORLD', 'JAVASCRIPT']
      
      // Map with objects
      const users = [
        { name: 'Alice', age: 25 },
        { name: 'Bob', age: 30 }
      ];
      const names = users.map(user => user.name);
      console.log(names); // ['Alice', 'Bob']
      
      // Map with index parameter
      const withIndex = numbers.map((num, index) => `${index}: ${num}`);
      console.log(withIndex); // ['0: 1', '1: 2', '2: 3', '3: 4', '4: 5']

  - question: "What is the filter() method in JavaScript and how does it work?"
    answer: "The filter() method creates a new array containing only elements that pass a test function. It returns a boolean for each element"
    code_example: |
      const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
      
      // Filter even numbers
      const evens = numbers.filter(num => num % 2 === 0);
      console.log(evens); // [2, 4, 6, 8, 10]
      
      // Filter numbers greater than 5
      const greaterThanFive = numbers.filter(num => num > 5);
      console.log(greaterThanFive); // [6, 7, 8, 9, 10]
      
      // Filter with strings
      const words = ['apple', 'banana', 'cherry', 'date'];
      const longWords = words.filter(word => word.length > 5);
      console.log(longWords); // ['banana', 'cherry']
      
      // Filter with objects
      const products = [
        { name: 'Laptop', price: 999, inStock: true },
        { name: 'Phone', price: 599, inStock: false },
        { name: 'Tablet', price: 399, inStock: true }
      ];
      
      const availableProducts = products.filter(product => product.inStock);
      console.log(availableProducts); // [Laptop, Tablet objects]
      
      const affordableProducts = products.filter(product => product.price < 500);
      console.log(affordableProducts); // [Phone, Tablet objects]
      
      // Filter with index
      const firstHalf = numbers.filter((num, index) => index < numbers.length / 2);
      console.log(firstHalf); // [1, 2, 3, 4, 5]

  - question: "What is the reduce() method in JavaScript and how does it work?"
    answer: "The reduce() method executes a function on each array element to reduce the array to a single value. It takes an accumulator and current value as parameters"
    code_example: |
      const numbers = [1, 2, 3, 4, 5];
      
      // Basic reduce - sum all numbers
      const sum = numbers.reduce((accumulator, current) => {
        console.log(`acc: ${accumulator}, current: ${current}`);
        return accumulator + current;
      }, 0); // 0 is the initial value
      console.log(sum); // 15
      
      // Find maximum value
      const max = numbers.reduce((acc, current) => {
        return current > acc ? current : acc;
      });
      console.log(max); // 5
      
      // Count occurrences
      const letters = ['a', 'b', 'a', 'c', 'b', 'a'];
      const counts = letters.reduce((acc, letter) => {
        acc[letter] = (acc[letter] || 0) + 1;
        return acc;
      }, {});
      console.log(counts); // { a: 3, b: 2, c: 1 }
      
      // Flatten array
      const nested = [[1, 2], [3, 4], [5, 6]];
      const flattened = nested.reduce((acc, current) => {
        return acc.concat(current);
      }, []);
      console.log(flattened); // [1, 2, 3, 4, 5, 6]
      
      // Group objects by property
      const people = [
        { name: 'Alice', age: 25, city: 'NYC' },
        { name: 'Bob', age: 30, city: 'LA' },
        { name: 'Charlie', age: 25, city: 'NYC' }
      ];
      
      const groupedByAge = people.reduce((acc, person) => {
        const age = person.age;
        if (!acc[age]) acc[age] = [];
        acc[age].push(person);
        return acc;
      }, {});
      console.log(groupedByAge); // { 25: [Alice, Charlie], 30: [Bob] }

  - question: "What is destructuring in JavaScript?"
    answer: "Destructuring is a syntax that allows you to extract values from arrays or properties from objects into distinct variables"
    code_example: |
      // Array destructuring
      const [first, second, ...rest] = [1, 2, 3, 4, 5];
      console.log(first); // 1
      console.log(second); // 2
      console.log(rest); // [3, 4, 5]
      
      // Object destructuring
      const person = { name: 'Alice', age: 30, city: 'New York' };
      const { name, age, city = 'Unknown' } = person;
      console.log(name); // 'Alice'
      console.log(age); // 30
      
      // Nested destructuring
      const user = {
        id: 1,
        profile: {
          username: 'alice123',
          email: 'alice@example.com'
        }
      };
      
      const { profile: { username, email } } = user;
      console.log(username); // 'alice123'

  - question: "What is the spread operator (...) in JavaScript?"
    answer: "The spread operator expands iterables (arrays, objects, strings) into individual elements"
    code_example: |
      // Array spreading
      const arr1 = [1, 2, 3];
      const arr2 = [4, 5, 6];
      const combined = [...arr1, ...arr2]; // [1, 2, 3, 4, 5, 6]
      
      // Function arguments
      function sum(a, b, c) {
        return a + b + c;
      }
      const numbers = [1, 2, 3];
      console.log(sum(...numbers)); // 6
      
      // Object spreading
      const obj1 = { a: 1, b: 2 };
      const obj2 = { c: 3, d: 4 };
      const merged = { ...obj1, ...obj2 }; // { a: 1, b: 2, c: 3, d: 4 }
      
      // Copying arrays/objects
      const originalArray = [1, 2, 3];
      const copiedArray = [...originalArray];
      
      const originalObj = { name: 'Alice', age: 30 };
      const copiedObj = { ...originalObj };
      
      // String spreading
      const str = 'hello';
      const chars = [...str]; // ['h', 'e', 'l', 'l', 'o']