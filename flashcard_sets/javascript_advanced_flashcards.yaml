title: "JavaScript Advanced"
icon: "ðŸ”¥"
flashcards:
  - question: "What is a JavaScript closure?"
    answer: "A closure is a function that has access to variables in its outer (enclosing) scope even after the outer function has returned"
    code_example: |
      function outerFunction(x) {
        // This is the outer function's scope
        
        function innerFunction(y) {
          // This closure has access to 'x' from outer scope
          return x + y;
        }
        
        return innerFunction;
      }
      
      const addFive = outerFunction(5);
      console.log(addFive(10)); // 15
      
      // 'x' is still accessible even after outerFunction returns
      
      // Practical example: creating private variables
      function createCounter() {
        let count = 0; // Private variable
        
        return {
          increment: () => ++count,
          decrement: () => --count,
          getCount: () => count
        };
      }
      
      const counter = createCounter();
      console.log(counter.increment()); // 1
      console.log(counter.getCount());  // 1

  - question: "What is event bubbling in JavaScript?"
    answer: "Event bubbling is when an event starts at the target element and bubbles up through its parent elements in the DOM tree"
    code_example: |
      // HTML structure:
      // <div id="outer">
      //   <div id="middle">
      //     <button id="inner">Click me</button>
      //   </div>
      // </div>
      
      document.getElementById('outer').addEventListener('click', () => {
        console.log('Outer div clicked');
      });
      
      document.getElementById('middle').addEventListener('click', () => {
        console.log('Middle div clicked');
      });
      
      document.getElementById('inner').addEventListener('click', (event) => {
        console.log('Button clicked');
        // event.stopPropagation(); // Stops bubbling
      });
      
      // Clicking button outputs:
      // "Button clicked"
      // "Middle div clicked"
      // "Outer div clicked"

  - question: "What is the 'this' keyword in JavaScript?"
    answer: "The 'this' keyword refers to the context in which a function is called. Its value depends on how the function is invoked"
    code_example: |
      const obj = {
        name: 'Alice',
        greet: function() {
          return `Hello, ${this.name}!`;
        },
        arrowGreet: () => {
          return `Hello, ${this.name}!`; // 'this' refers to global scope
        }
      };
      
      console.log(obj.greet());      // "Hello, Alice!"
      console.log(obj.arrowGreet()); // "Hello, undefined!"
      
      // Changing context with call/apply/bind
      const person = { name: 'Bob' };
      console.log(obj.greet.call(person)); // "Hello, Bob!"
      
      // Binding context
      const boundGreet = obj.greet.bind(person);
      console.log(boundGreet()); // "Hello, Bob!"

  - question: "What is a JavaScript Promise?"
    answer: "A Promise is an object representing the eventual completion or failure of an asynchronous operation"
    code_example: |
      // Creating a Promise
      const myPromise = new Promise((resolve, reject) => {
        setTimeout(() => {
          const success = Math.random() > 0.5;
          if (success) {
            resolve("Operation successful!");
          } else {
            reject("Operation failed!");
          }
        }, 1000);
      });
      
      // Using the Promise
      myPromise
        .then(result => {
          console.log(result); // "Operation successful!"
        })
        .catch(error => {
          console.log(error); // "Operation failed!"
        });
      
      // Async/await syntax
      async function handlePromise() {
        try {
          const result = await myPromise;
          console.log(result);
        } catch (error) {
          console.log(error);
        }
      }

  - question: "What is the difference between synchronous and asynchronous JavaScript?"
    answer: "Synchronous code executes line by line, blocking the thread. Asynchronous code allows other operations to continue while waiting for completion"
    code_example: |
      // Synchronous code
      console.log("Start");
      function syncFunction() {
        for (let i = 0; i < 1000000000; i++) {
          // This blocks the thread
        }
        console.log("Sync function done");
      }
      syncFunction();
      console.log("End");
      // Output: Start, Sync function done, End
      
      // Asynchronous code
      console.log("Start");
      setTimeout(() => {
        console.log("Async function done");
      }, 1000);
      console.log("End");
      // Output: Start, End, Async function done (after 1 second)
      
      // Using async/await
      async function fetchData() {
        try {
          const response = await fetch('https://api.example.com/data');
          const data = await response.json();
          return data;
        } catch (error) {
          console.error('Error:', error);
        }
      }

  - question: "What is JavaScript hoisting?"
    answer: "Hoisting is JavaScript's behavior of moving variable and function declarations to the top of their scope during compilation"
    code_example: |
      // Variable hoisting with var
      console.log(x); // undefined (not ReferenceError)
      var x = 5;
      
      // Equivalent to:
      // var x;
      // console.log(x); // undefined
      // x = 5;
      
      // let and const are hoisted but in temporal dead zone
      // console.log(y); // ReferenceError: Cannot access 'y' before initialization
      let y = 10;
      
      // Function hoisting
      sayHello(); // "Hello!" (works because function is hoisted)
      
      function sayHello() {
        console.log("Hello!");
      }
      
      // Function expressions are not hoisted
      // sayGoodbye(); // TypeError: sayGoodbye is not a function
      var sayGoodbye = function() {
        console.log("Goodbye!");
      };

  - question: "What are JavaScript classes and how do they work?"
    answer: "Classes are templates for creating objects with shared properties and methods, providing a cleaner syntax for prototypal inheritance"
    code_example: |
      // Class declaration
      class Animal {
        constructor(name, species) {
          this.name = name;
          this.species = species;
        }
        
        // Instance method
        speak() {
          console.log(`${this.name} makes a sound`);
        }
        
        // Static method
        static getKingdom() {
          return 'Animalia';
        }
        
        // Getter
        get info() {
          return `${this.name} is a ${this.species}`;
        }
        
        // Setter
        set nickname(nick) {
          this.nick = nick;
        }
      }
      
      // Inheritance
      class Dog extends Animal {
        constructor(name, breed) {
          super(name, 'Canine'); // Call parent constructor
          this.breed = breed;
        }
        
        speak() {
          console.log(`${this.name} barks!`);
        }
        
        wagTail() {
          console.log(`${this.name} wags tail`);
        }
      }
      
      const myDog = new Dog('Buddy', 'Golden Retriever');
      myDog.speak(); // "Buddy barks!"
      console.log(myDog.info); // "Buddy is a Canine"

  - question: "What is event delegation in JavaScript?"
    answer: "Event delegation is a technique where you attach an event listener to a parent element to handle events from child elements using event bubbling"
    code_example: |
      // Without event delegation (inefficient for many elements)
      const buttons = document.querySelectorAll('.button');
      buttons.forEach(button => {
        button.addEventListener('click', handleClick);
      });
      
      // With event delegation (efficient)
      const container = document.getElementById('button-container');
      container.addEventListener('click', function(event) {
        if (event.target.classList.contains('button')) {
          handleClick(event);
        }
      });
      
      function handleClick(event) {
        console.log(`Button ${event.target.textContent} clicked`);
      }
      
      // Benefits:
      // 1. Better performance (one listener instead of many)
      // 2. Works with dynamically added elements
      // 3. Less memory usage

  - question: "What are JavaScript modules and how do import/export work?"
    answer: "Modules allow you to split code into separate files and share functionality between them using import and export statements"
    code_example: |
      // math.js - Named exports
      export function add(a, b) {
        return a + b;
      }
      
      export function subtract(a, b) {
        return a - b;
      }
      
      export const PI = 3.14159;
      
      // Default export
      export default function multiply(a, b) {
        return a * b;
      }
      
      // main.js - Importing
      import multiply, { add, subtract, PI } from './math.js';
      
      // Import everything
      import * as mathUtils from './math.js';
      
      // Usage
      console.log(add(5, 3));        // 8
      console.log(multiply(4, 7));   // 28
      console.log(mathUtils.PI);     // 3.14159
      
      // Dynamic imports
      async function loadMath() {
        const mathModule = await import('./math.js');
        console.log(mathModule.add(2, 3)); // 5
      }

  - question: "What is the JavaScript call stack and event loop?"
    answer: "The call stack tracks function execution, while the event loop manages asynchronous operations by moving callbacks from queues to the stack when it's empty"
    code_example: |
      console.log('Start');
      
      // Synchronous code - goes directly to call stack
      function syncFunction() {
        console.log('Sync function');
      }
      
      // Asynchronous code - goes to Web APIs, then callback queue
      setTimeout(() => {
        console.log('Timeout callback');
      }, 0);
      
      // Promise - goes to microtask queue (higher priority)
      Promise.resolve().then(() => {
        console.log('Promise callback');
      });
      
      syncFunction();
      console.log('End');
      
      // Output order:
      // Start
      // Sync function
      // End
      // Promise callback (microtask queue processed first)
      // Timeout callback (callback queue processed after microtasks)
      
      // Event loop prioritizes microtasks over macrotasks