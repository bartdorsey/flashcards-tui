title: "Shell Basics"
icon: "ðŸ’»"
flashcards:
  - question: "How do you navigate the file system in the shell?"
    answer: "Use pwd to show current directory, cd to change directories, and ls to list directory contents"
    code_example: |
      # Show current directory
      pwd

      # Change to home directory
      cd ~
      cd

      # Change to parent directory
      cd ..

      # Change to previous directory
      cd -

      # Change to specific directory
      cd /path/to/directory

  - question: "How do you list files and directories?"
    answer: "Use ls with various options to display files and directories with different levels of detail"
    code_example: |
      # List files in current directory
      ls

      # List with details (permissions, size, date)
      ls -l

      # List all files including hidden ones
      ls -a

      # List with details and hidden files
      ls -la

      # List files in another directory
      ls /path/to/directory

      # List with human-readable file sizes
      ls -lh

  - question: "How do you create and remove directories?"
    answer: "Use mkdir to create directories and rmdir or rm -r to remove them"
    code_example: |
      # Create a single directory
      mkdir new_directory

      # Create nested directories
      mkdir -p path/to/new/directory

      # Create multiple directories
      mkdir dir1 dir2 dir3

      # Remove empty directory
      rmdir empty_directory

      # Remove directory and all contents (be careful!)
      rm -r directory_name

      # Remove directory with confirmation
      rm -ri directory_name

  - question: "How do you create, view, and delete files?"
    answer: "Use touch to create empty files, cat/less/more to view files, and rm to delete files"
    code_example: |
      # Create empty file
      touch newfile.txt

      # Create multiple files
      touch file1.txt file2.txt file3.txt

      # View entire file content
      cat filename.txt

      # View file with pagination
      less filename.txt
      more filename.txt

      # Delete a file
      rm filename.txt

      # Delete multiple files
      rm file1.txt file2.txt

      # Delete with confirmation
      rm -i filename.txt

  - question: "How do you copy and move files and directories?"
    answer: "Use cp to copy files/directories and mv to move or rename them"
    code_example: |
      # Copy a file
      cp source.txt destination.txt

      # Copy file to another directory
      cp file.txt /path/to/directory/

      # Copy directory and all contents
      cp -r source_directory destination_directory

      # Move/rename a file
      mv oldname.txt newname.txt

      # Move file to another directory
      mv file.txt /path/to/directory/

      # Move directory
      mv old_directory new_directory

  - question: "How do you search for files and text?"
    answer: "Use find to search for files by name/type and grep to search for text within files"
    code_example: |
      # Find files by name
      find . -name "*.txt"
      find /path -name "filename"

      # Find directories
      find . -type d -name "dirname"

      # Search for text in files
      grep "search_term" filename.txt

      # Search recursively in all files
      grep -r "search_term" .

      # Search case-insensitive
      grep -i "Search_Term" filename.txt

      # Search and show line numbers
      grep -n "search_term" filename.txt

  - question: "How do you use wildcards and patterns?"
    answer: "Use * for any characters, ? for single character, and [] for character ranges in file operations"
    code_example: |
      # List all .txt files
      ls *.txt

      # List files starting with 'data'
      ls data*

      # Single character wildcard
      ls file?.txt

      # Character range
      ls file[1-5].txt
      ls file[abc].txt

      # Copy all .log files
      cp *.log backup/

      # Remove all temporary files
      rm *~

  - question: "How do you view and edit file permissions?"
    answer: "Use ls -l to view permissions and chmod to change them using numeric or symbolic notation"
    code_example: |
      # View file permissions
      ls -l filename.txt

      # Change permissions using numbers (rwx = 421)
      chmod 755 script.sh    # rwxr-xr-x
      chmod 644 file.txt     # rw-r--r--
      chmod 600 private.txt  # rw-------

      # Change permissions using symbols
      chmod +x script.sh     # Add execute permission
      chmod -w file.txt      # Remove write permission
      chmod u+x,g-w file.txt # User add execute, group remove write

  - question: "How do you redirect input and output?"
    answer: "Use > to redirect output to file, >> to append, < for input, and | to pipe between commands"
    code_example: |
      # Redirect output to file (overwrites)
      ls > filelist.txt
      echo "Hello" > greeting.txt

      # Append output to file
      echo "World" >> greeting.txt
      ls >> filelist.txt

      # Redirect input from file
      sort < unsorted.txt

      # Pipe output to another command
      ls | grep ".txt"
      cat file.txt | sort | uniq

      # Redirect errors
      command 2> error.log

  - question: "How do you view command history and get help?"
    answer: "Use history to see past commands, man for manual pages, and --help for quick command help"
    code_example: |
      # View command history
      history

      # Re-run previous command
      !!

      # Re-run command from history by number
      !123

      # Search command history
      history | grep "search_term"

      # Get help for commands
      man ls
      ls --help
      help cd    # For built-in commands

  - question: "How do you manage processes and jobs?"
    answer: "Use ps to list processes, kill to terminate them, and & to run commands in background"
    code_example: |
      # List running processes
      ps
      ps aux

      # Kill a process by PID
      kill 1234
      kill -9 1234  # Force kill

      # Run command in background
      long_command &

      # List background jobs
      jobs

      # Bring job to foreground
      fg %1

      # Send job to background
      bg %1

  - question: "How do you work with environment variables?"
    answer: "Use echo to display variables, export to set them, and env to list all environment variables"
    code_example: |
      # Display variable value
      echo $HOME
      echo $PATH
      echo $USER

      # Set a variable (current session only)
      MY_VAR="hello"
      echo $MY_VAR

      # Export variable (available to child processes)
      export MY_VAR="hello"

      # List all environment variables
      env
      printenv

  - question: "How do you compress and archive files?"
    answer: "Use tar for creating archives and gzip/gunzip for compression, often combined as tar.gz"
    code_example: |
      # Create tar archive
      tar -cf archive.tar file1 file2 directory/

      # Create compressed tar archive
      tar -czf archive.tar.gz file1 file2 directory/

      # Extract tar archive
      tar -xf archive.tar
      tar -xzf archive.tar.gz

      # List contents of archive
      tar -tf archive.tar

      # Compress single file
      gzip file.txt        # Creates file.txt.gz
      gunzip file.txt.gz   # Extracts back to file.txt

  - question: "How do you check disk usage and system information?"
    answer: "Use df to check disk space, du for directory sizes, and various commands for system info"
    code_example: |
      # Check disk space
      df -h

      # Check directory size
      du -h directory/
      du -sh directory/  # Summary only

      # Check current directory size
      du -sh .

      # Show system uptime
      uptime

      # Show current date and time
      date

      # Show who is logged in
      who
      w

  - question: "How do you use basic text processing commands?"
    answer: "Use head/tail for file parts, sort for ordering, uniq for duplicates, and wc for counting"
    code_example: |
      # Show first/last lines of file
      head filename.txt
      tail filename.txt
      head -5 filename.txt  # First 5 lines
      tail -10 filename.txt # Last 10 lines

      # Sort file contents
      sort filename.txt
      sort -r filename.txt  # Reverse order

      # Remove duplicate lines (requires sorted input)
      sort filename.txt | uniq

      # Count lines, words, characters
      wc filename.txt
      wc -l filename.txt  # Lines only
      wc -w filename.txt  # Words only

  - question: "How do you control command execution and combine commands?"
    answer: "Use && for conditional execution, || for alternatives, ; for sequential commands, and () for grouping"
    code_example: |
      # Run second command only if first succeeds
      mkdir newdir && cd newdir

      # Run second command only if first fails
      ls nonexistent || echo "File not found"

      # Run commands sequentially regardless of success
      command1; command2; command3

      # Group commands
      (cd /tmp && ls && pwd)

      # Run command only if condition is true
      [ -f file.txt ] && echo "File exists"

  - question: "What is a shell?"
    answer: "A shell is a command-line interface that interprets and executes user commands, acting as an intermediary between the user and the operating system"
    code_example: |
      # Common shells include:
      # bash (Bourne Again Shell)
      # zsh (Z Shell)
      # sh (Bourne Shell)
      # fish (Friendly Interactive Shell)
      
      # Check current shell
      echo $SHELL
      
      # Check available shells
      cat /etc/shells

  - question: "What is a terminal and how does it differ from a shell?"
    answer: "A terminal is the program that provides the window/interface, while the shell is the command interpreter running inside it"
    code_example: |
      # Terminal examples:
      # - GNOME Terminal
      # - iTerm2
      # - Windows Terminal
      # - xterm
      
      # The terminal displays text and captures input
      # The shell processes the commands you type

  - question: "What is the difference between absolute and relative paths?"
    answer: "Absolute paths start from root (/) and specify complete location, while relative paths start from current directory"
    code_example: |
      # Absolute path (starts with /)
      /home/user/documents/file.txt
      /usr/bin/python
      /etc/passwd
      
      # Relative path (relative to current directory)
      documents/file.txt
      ../parent_directory/file.txt
      ./current_directory/file.txt

  - question: "What do the special directory symbols . and .. mean?"
    answer: "A single dot (.) represents the current directory, while double dots (..) represent the parent directory"
    code_example: |
      # Current directory
      ls .
      cp file.txt .
      
      # Parent directory
      cd ..
      ls ../other_directory
      
      # Commonly used in paths
      ./script.sh        # Run script in current directory
      ../config/app.conf # File in parent's config directory

  - question: "What is the home directory and how do you reference it?"
    answer: "The home directory is your personal directory, referenced by ~ (tilde) or the $HOME environment variable"
    code_example: |
      # Reference home directory
      cd ~
      cd $HOME
      
      # Home directory shortcuts
      ~/documents        # Your documents folder
      ~/Desktop         # Your desktop folder
      
      # Other users' home directories
      ~username/documents

  - question: "What are file permissions and what do rwx mean?"
    answer: "File permissions control access to files. r=read, w=write, x=execute. They apply to owner, group, and others"
    code_example: |
      # Permission display: -rwxr-xr--
      # First character: file type (- = file, d = directory)
      # Next 3: owner permissions (rwx)
      # Next 3: group permissions (r-x)
      # Last 3: other permissions (r--)
      
      # Permission values:
      # r (read) = 4
      # w (write) = 2
      # x (execute) = 1

  - question: "What is a process and what is a PID?"
    answer: "A process is a running program. PID (Process ID) is a unique number assigned to each running process"
    code_example: |
      # Every running program is a process
      # Each process has a unique PID
      
      # View processes and their PIDs
      ps aux
      
      # Example output:
      # USER  PID  %CPU %MEM COMMAND
      # user  1234  0.1  0.5 /bin/bash
      # user  5678  2.0  1.2 python script.py

  - question: "What are standard input, output, and error streams?"
    answer: "stdin (input), stdout (output), and stderr (error) are the three standard data streams for program communication"
    code_example: |
      # stdin (0): where programs read input
      # stdout (1): where programs write normal output
      # stderr (2): where programs write error messages
      
      # Redirect streams:
      command > output.txt     # stdout to file
      command 2> error.txt     # stderr to file
      command < input.txt      # stdin from file
      command &> all.txt       # both stdout and stderr

  - question: "What is an environment variable?"
    answer: "Environment variables are named values that affect how programs run and behave in the shell environment"
    code_example: |
      # Common environment variables:
      echo $PATH     # Where shell looks for commands
      echo $HOME     # Your home directory
      echo $USER     # Your username
      echo $PWD      # Current working directory
      
      # Set environment variable
      export MY_VAR="value"

  - question: "What is the PATH variable and why is it important?"
    answer: "PATH is an environment variable that tells the shell where to look for executable commands and programs"
    code_example: |
      # View current PATH
      echo $PATH
      
      # PATH contains directories separated by colons:
      # /usr/bin:/bin:/usr/local/bin
      
      # Add directory to PATH
      export PATH=$PATH:/new/directory
      
      # When you type 'ls', shell searches PATH directories

  - question: "What is a command line argument?"
    answer: "Command line arguments are additional information passed to a command, including options (flags) and parameters"
    code_example: |
      # Structure: command [options] [arguments]
      ls -la /home/user
      #  ^^^^ ^^^^^^^^^^
      # options arguments
      
      # Options usually start with - or --
      ls -l          # Short option
      ls --long      # Long option
      ls -la         # Multiple short options

  - question: "What is a wildcard or glob pattern?"
    answer: "Wildcards are special characters that match multiple filenames or text patterns in shell commands"
    code_example: |
      # Common wildcards:
      *       # Matches any number of characters
      ?       # Matches exactly one character
      [abc]   # Matches any one of a, b, or c
      [a-z]   # Matches any lowercase letter
      [0-9]   # Matches any digit
      
      # Examples:
      *.txt      # All files ending in .txt
      file?.log  # file1.log, fileA.log, etc.

  - question: "What is piping and how does it work?"
    answer: "Piping connects the output of one command to the input of another command using the | (pipe) symbol"
    code_example: |
      # Basic pipe: command1 | command2
      # Output of command1 becomes input of command2
      
      ls | grep ".txt"          # List files, filter for .txt
      cat file.txt | sort       # Show file content, then sort
      ps aux | grep "python"    # List processes, find python ones
      
      # Chain multiple pipes
      cat data.txt | sort | uniq | wc -l

  - question: "What is redirection in the shell?"
    answer: "Redirection changes where a command's input comes from or where its output goes, using symbols like >, <, and >>"
    code_example: |
      # Output redirection:
      > file.txt    # Redirect stdout to file (overwrite)
      >> file.txt   # Redirect stdout to file (append)
      2> error.txt  # Redirect stderr to file
      
      # Input redirection:
      < file.txt    # Read input from file
      
      # Combined:
      command < input.txt > output.txt

  - question: "What is a command prompt and what information does it typically show?"
    answer: "A command prompt is the text that appears before your cursor, showing information like username, hostname, and current directory"
    code_example: |
      # Common prompt formats:
      user@hostname:~$           # username@computer:directory$
      [user@hostname ~]$         # [username@hostname directory]$
      user:/home/user$           # username:full_path$
      
      # Prompt symbols:
      $    # Regular user
      #    # Root/administrator user
      %    # Often used in zsh